{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Adds browser based controls to the transit VPC solution ",
    "Parameters": {

        "LambdaBucketName": {
            "Description": "Bucket name for Lambda files",
            "Default": "xxxx",
            "Type": "String"
        },
        "SubscriberLambdaExecutionRole": {
            "Description": "Subscriber Account Lambda Execution Role ARN",
            "Default": "arn:aws:iam::106808901653:role/SubscriberLambdaExecutionRole-xxxx",
            "Type": "String"
        },
        "SubscriberAssumeRoleArn" :{
            "Default": "",
            "Type": "String"
        },
        "subscriberConfigTable": {
            "Default": "SubscriberConfig-xxxx",
            "Type": "String"
        },
        "SubscriberLocalDb": {
            "Default": "SubscriberLocalDb-xxxx",
            "Type": "String"
        },
        "trustedSecurityGroup": {
            "Default": "",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "mgmtAz1": {
            "Description": "Mgt Subnet for the lambda function to execute in Azx",
            "Type": "List<AWS::EC2::Subnet::Id>"
        }
    },
    "Resources": {
        "getvpcsRes": {
            "Type": "AWS::ApiGateway::Resource",
            "DependsOn": [
                "SubsVpcWebApi"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ParentId": {
                    "Fn::GetAtt": ["SubsVpcWebApi", "RootResourceId"]
                },
                "PathPart": "getvpcs"
            }
        },
        "getvpcsLambda": {
            "Type": "AWS::Lambda::Function",

            "Properties": {
                "FunctionName": {
                    "Fn::Join": ["-", ["getvpcs", {
                        "Ref": "AWS::StackName"
                    }]]
                },
                "Description": "Get Available VPCIds",
                "Handler": "getvpcs.lambda_handler",
                "Role": {
                    "Ref": "SubscriberLambdaExecutionRole"
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaBucketName"
                    },
                    "S3Key": "ApiLambda.zip"
                },
                "Environment": {
                    "Variables": {

                        "sLambdaSnsTopic": {
                            "Ref": "apiAsyncCreateLambdaTopic"
                        },
                        "SubscriberAssumeRoleArn": {
                            "Ref": "SubscriberAssumeRoleArn"
                        }
                    }
                },
                "Runtime": "python3.6",
                "Timeout": "60"
            }
        },

        "getvpcsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": ["getvpcsLambda", "Arn"]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": ["", ["arn:aws:execute-api:", {
                        "Ref": "AWS::Region"
                    }, ":", {
                        "Ref": "AWS::AccountId"
                    }, ":", {
                        "Ref": "SubsVpcWebApi"
                    }, "/*"]]
                }
            },
            "DependsOn": [
                "SubsVpcWebApi"
            ]
        },
        "apiDeleteSubsVpnLambda": {
            "Type": "AWS::Lambda::Function",

            "Properties": {
                "FunctionName": {
                    "Fn::Join": ["-", ["apiDeleteSubsVpnLambda", {
                        "Ref": "AWS::StackName"
                    }]]
                },

                "Description": "Allocate VPN resources from API",
                "Handler": "apiDeleteSubsVpn.lambda_handler",
                "Role": {
                    "Ref": "SubscriberLambdaExecutionRole"
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaBucketName"
                    },
                    "S3Key": "ApiLambda.zip"
                },
                "Environment": {
                    "Variables": {

                        "subscriberConfigTable": {
                            "Ref": "subscriberConfigTable"
                        },

                        "Region": {
                            "Ref": "AWS::Region"
                        }
                    }
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "VpcConfig": {
                    "SecurityGroupIds": {
                        "Ref": "trustedSecurityGroup"
                    },
                    "SubnetIds": {
                        "Ref": "mgmtAz1"
                    }

                }
            }
        },
        "apiDeleteSubsVpnLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": ["apiDeleteSubsVpnLambda", "Arn"]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": ["", ["arn:aws:execute-api:", {
                        "Ref": "AWS::Region"
                    }, ":", {
                        "Ref": "AWS::AccountId"
                    }, ":", {
                        "Ref": "SubsVpcWebApi"
                    }, "/*"]]
                }
            },
            "DependsOn": ["SubsVpcWebApi"]
        },
        "apiAsyncCreateLambda": {
            "Type": "AWS::Lambda::Function",

            "Properties": {
                "FunctionName": {
                    "Fn::Join": ["-", ["apiAsyncCreateVGWLambda", {
                        "Ref": "AWS::StackName"
                    }]]
                },

                "Description": "Allocate VPN resources from API",
                "Handler": "apiAsyncCreateVGW.lambda_handler",
                "Role": {
                    "Ref": "SubscriberLambdaExecutionRole"
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaBucketName"
                    },
                    "S3Key": "ApiLambda.zip"
                },
                "Environment": {
                    "Variables": {

                        "subscriberConfigTable": {
                            "Ref": "subscriberConfigTable"
                        },
                        "Region": {
                            "Ref": "AWS::Region"
                        }
                    }
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "VpcConfig": {
                    "SecurityGroupIds": {
                        "Ref": "trustedSecurityGroup"
                    },
                    "SubnetIds": {
                        "Ref": "mgmtAz1"
                    }
                }
            }
        },
        "apiAsyncCreateLambdaPermission": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": ["apiAsyncCreateLambda", "Arn"]
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "apiAsyncCreateLambdaTopic"
                }
            },
            "Type": "AWS::Lambda::Permission",
            "DependsOn": ["apiAsyncCreateLambdaTopic"]
        },
        "apiAsyncCreateLambdaTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [{
                    "Endpoint": {
                        "Fn::GetAtt": ["apiAsyncCreateLambda", "Arn"]
                    },
                    "Protocol": "lambda"
                }]
            },
            "DependsOn": ["apiAsyncCreateLambda"]
        },
        "checkvgwstatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-", [
                            "checkvgwstatusLambda",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Description": "Allocate VPN resources from API",
                "Handler": "checkvgwstatus.lambda_handler",
                "Role": {
                    "Ref": "SubscriberLambdaExecutionRole"
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaBucketName"
                    },
                    "S3Key": "ApiLambda.zip"
                },
                "Environment": {
                    "Variables": {
                        "subscriberConfigTable": {
                            "Ref": "subscriberConfigTable"
                        }
                    }
                },
                "Runtime": "python3.6",
                "Timeout": "300",
                "VpcConfig": {
                    "SecurityGroupIds": {
                        "Ref": "trustedSecurityGroup"
                    },
                    "SubnetIds": {
                        "Ref": "mgmtAz1"
                    }
                }
            }
        },
        "SubsVpcWebApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "Subscribing VPC Web Management API Cors",
                "Description": "Used to manage creation and deletion of Transit VPC connections",
                "FailOnWarnings": true

            }
        },
        "checkvgwstatusRes": {
            "Type": "AWS::ApiGateway::Resource",
            "DependsOn": [
                "SubsVpcWebApi"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ParentId": {
                    "Fn::GetAtt": ["SubsVpcWebApi", "RootResourceId"]
                },
                "PathPart": "checkvgwstatus"
            }
        },
        "checkvgwstatusGetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "checkvgwstatusRes"
                },
                "HttpMethod": "GET",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["", ["arn:aws:apigateway:", {
                            "Ref": "AWS::Region"
                        }, ":lambda:path/2015-03-31/functions/", {
                            "Fn::GetAtt": ["checkvgwstatusLambda", "Arn"]
                        }, "/invocations"]]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200"
                    }]
                },
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseModels": {
                        "application/json": "Empty"
                    }
                }]

            }
        },
        "checkvgwstatusOptionsMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": true,
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Credentials": true
                    },
                    "ResponseModels": {}
                }],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": "'*'",
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                            "method.response.header.Access-Control-Allow-Credentials": "'false'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        }
                    }]
                },
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "checkvgwstatusRes"
                }
            }
        },
        "getvpcsGetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "getvpcsRes"
                },
                "HttpMethod": "GET",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["", ["arn:aws:apigateway:", {
                            "Ref": "AWS::Region"
                        }, ":lambda:path/2015-03-31/functions/", {
                            "Fn::GetAtt": ["getvpcsLambda", "Arn"]
                        }, "/invocations"]]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200"
                    }]
                },
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseModels": {
                        "application/json": "Empty"
                    }
                }]

            }
        },
        "getvpcsOptionsMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": true,
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Credentials": true
                    },
                    "ResponseModels": {}
                }],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": "'*'",
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                            "method.response.header.Access-Control-Allow-Credentials": "'false'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        }
                    }]
                },
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "getvpcsRes"
                }
            }
        },
        "apiDeleteSubsVpnRes": {
            "Type": "AWS::ApiGateway::Resource",
            "DependsOn": [
                "SubsVpcWebApi"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ParentId": {
                    "Fn::GetAtt": ["SubsVpcWebApi", "RootResourceId"]
                },
                "PathPart": "deletesubsvpn"
            }
        },
        "apiDeleteSubsVpnresGetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "apiDeleteSubsVpnRes"
                },
                "HttpMethod": "GET",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["", ["arn:aws:apigateway:", {
                            "Ref": "AWS::Region"
                        }, ":lambda:path/2015-03-31/functions/", {
                            "Fn::GetAtt": ["apiDeleteSubsVpnLambda", "Arn"]
                        }, "/invocations"]]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200"
                    }]
                },
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseModels": {
                        "application/json": "Empty"
                    }
                }]
            }
        },
        "deletesubsvpnresOptionsMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": true,
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Credentials": true
                    },
                    "ResponseModels": {}
                }],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": "'*'",
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                            "method.response.header.Access-Control-Allow-Credentials": "'false'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        }
                    }]
                },
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "ResourceId": {
                    "Ref": "apiDeleteSubsVpnRes"
                }
            }
        },
        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "SubsVpcWebApi", "checkvgwstatusGetMethod", "checkvgwstatusOptionsMethod",
                "getvpcsGetMethod", "getvpcsOptionsMethod", "apiDeleteSubsVpnresGetMethod",
                "deletesubsvpnresOptionsMethod"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                }
            }
        },
        "SubsVpcWebApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiDeployment"
                },
                "RestApiId": {
                    "Ref": "SubsVpcWebApi"
                },
                "StageName": "Production"
            }
        }
    },
    "Outputs": {
        "apiAsyncCreateLambdaTopic": {
            "Description": "IAM role to allow access to transit VPC S3 bucket",
            "Value": {
                "Ref": "apiAsyncCreateLambdaTopic"
            }
        },
        
        "SubscriberUrl": {
              "Description": "Root URL of the Subscriber API gateway",
              "Value": {"Fn::Join": ["", ["https://", {"Ref": "SubsVpcWebApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/Production"]]}
            }
          
    }

}
